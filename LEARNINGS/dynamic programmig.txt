
Questions:
70. Climbing Stairs
118. Pascal's Triangle
119. Pascal's Triangle II
121. Best Time to Buy and Sell Stock
338. Counting Bits
392. Is Subsequence
746. Min Cost Climbing Stairs
509. Fibonacci Number
1025. Divisor Game
2900. Longest Unequal Adjacent Groups Subsequence I
1137. N-th Tribonacci Number
1668. Maximum Repeating Substring
5. Longest Palindromic Substring (not exactly)



Pointers:

1. Recursive with memoization - top down approach (20, 19, 18,... 1)
    1.1 this can also be done iteratively with tabulation but we have to run the loop backwards (20, 19, 18.... 1)
2. Iterative with Tabulation - bottom up approach (1, 2, 3,... 20)


3. When a value depends on the ahead value (i+1 / i+2 value), we should use method 1 (Recursive with memoization)
    3.1 we could also use iteration with tabulation, with the loop running backwards (20, 19, 18,... )


4. WHEN EVER THE PROBLEM IS TOUGH/HARD, START WITH A RECURSIVE APPROACH.
    4.1 FIRST RULE-OUT RECURSIVE AND ONLY THEN MOVE TO ITERATIVE.


5. for WAYS questions, always do Ways[something] + ways[other] and have a base condition where the actual value is present
    5.1 base like WAYS[0] = 1, WAYS[1] = 2
    5.2 never have 1 + Ways[something] + ways[other] with WAYS[0] = 0, WAYS[1] = 0 (usually doesn't work)