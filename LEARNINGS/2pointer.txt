# for finding the mid element

slow, fast = head, head
while fast and fast.next:
    slow = slow.next
    fast = fast.next.next


https://leetcode.com/problems/find-the-duplicate-number/solutions/6097957/video-floyd-s-tortoise-and-hare-algorithm-and-prove-it-with-simple-calculation

Visualization of Floyd's Tortoise and Hare algorithm


At first, Let's think with Linked List and try to find starting node of cycle which is y.

Now, slow and fast pointers are at node x

slow pointer moves once which is at node y
fast pointer moves twice which is at node z

they don't meet each other, so let's continue

slow pointer moves once which is at node z
fast pointer moves twice which is at node z

now they meet each other, so let's initialize fast pointer with node x

slow pointer moves once which is at node y
fast pointer moves once which is at node y

That's why we can find starting node of cycle node y.

Let's calculate movement distance of slow and fast pointers

slow pointer moves A + B
fast pointer moves A + B + C + B

Since slow pointer moves once and fast pointer moves twice, the below formula is vaild.

2(A + B) = A + B + C + B

Let's simplify the formula

2A + 2B = 2B + A + C

Delete 2B at both sides
2A = A + C

Delete A at both sides
A = C

so, it turns out distance A and distance C is actually the same. When two pointers meet at node z then fast pointer is initialized with node x again and each pointer moves through path A or C one by one, so that we can find starting node of cycle which is node y.